package Euler;
import java.io.IOException;
import java.util.*;
import java.net.*;

// Yes I know this file is a mess but it's been fun! (And it's my mess so who cares)

enum Suit {
    CLUBS, DIAMONDS, SPADES, HEARTS
}
enum cardValue {
    TWO (2),
    THREE (3),
    FOUR (4),
    FIVE (5),
    SIX (6),
    SEVEN (7),
    EIGHT (8),
    NINE (9),
    TEN (10),
    JACK (11),
    QUEEN (12),
    KING (13),
    ACE (14);
    private int value;
    cardValue (int a) {
        this.value = a;
    }
    public int getValue() {
        return this.value;
    }
}

public class PokerHands {
    public static void main (String[] args) {
        int player1Wins = 0;
        class Hand {
            class Card {
                Suit suit;
                cardValue cardValue;
                private Card (String a) {
                    switch (a.substring(1)) {
                        case "C": this.suit = Suit.CLUBS; break;
                        case "D": this.suit = Suit.DIAMONDS; break;
                        case "S": this.suit = Suit.SPADES; break;
                        case "H": this.suit = Suit.HEARTS; break;
                    }
                    switch (a.substring(0,1)) {
                        case "2": this.cardValue = Euler.cardValue.TWO; break;
                        case "3": this.cardValue = Euler.cardValue.THREE; break;
                        case "4": this.cardValue = Euler.cardValue.FOUR; break;
                        case "5": this.cardValue = Euler.cardValue.FIVE; break;
                        case "6": this.cardValue = Euler.cardValue.SIX; break;
                        case "7": this.cardValue = Euler.cardValue.SEVEN; break;
                        case "8": this.cardValue = Euler.cardValue.EIGHT; break;
                        case "9": this.cardValue = Euler.cardValue.NINE; break;
                        case "T": this.cardValue = Euler.cardValue.TEN; break;
                        case "J": this.cardValue = Euler.cardValue.JACK; break;
                        case "Q": this.cardValue = Euler.cardValue.QUEEN; break;
                        case "K": this.cardValue = Euler.cardValue.KING; break;
                        case "A": this.cardValue = Euler.cardValue.ACE; break;
                    }
                }
            }
            private Card cardOne;
            private Card cardTwo;
            private Card cardThree;
            private Card cardFour;
            private Card cardFive;
            private int highCard = 0;               // 1
            private int pair = 0;                   // 2
            private boolean hasOnePair = false;
            private int twoPair = 0;                // 3
            private boolean hasTwoPair = false;
            private int threeOfAKind = 0;           // 4
            private boolean hasThreeOfAKind = false;
            private int straight = 0;               // 5
            private boolean isStraight = false;
            private boolean isFlush = false;            // 6
            private int fullHouse = 0;              // 7
            private int fourOfAKind = 0;            // 8
            private int straightFlush = 0;          // 9
            private int value = 1;
            private boolean checking = true;
            private ArrayList<Integer> cards = new ArrayList<>();

            public Hand(String a, String b, String c, String d, String e) {
                cardOne = new Card(a);
                cardTwo = new Card(b);
                cardThree = new Card(c);
                cardFour = new Card(d);
                cardFive = new Card(e);
                cards.add(cardOne.cardValue.getValue());
                cards.add(cardTwo.cardValue.getValue());
                cards.add(cardThree.cardValue.getValue());
                cards.add(cardFour.cardValue.getValue());
                cards.add(cardFive.cardValue.getValue());
                Collections.sort(cards);
                System.out.print(cards);
                calculateHandValue();
                System.out.println(cardOne.cardValue.getValue() + " " + cardOne.suit + " | " + cardTwo.cardValue.getValue() + " " + cardTwo.suit + " | " + cardThree.cardValue.getValue() + " " + cardThree.suit + " | " + cardFour.cardValue.getValue() + " " + cardFour.suit + " | " + cardFive.cardValue.getValue() + " " + cardFive.suit);
            }
            private void calculateHandValue() {
                while (checking) {
                    while (checking) {
                        if ((cards.get(1) - cards.get(0)) != 1) break;
                        if ((cards.get(2) - cards.get(1)) != 1) break;
                        if ((cards.get(3) - cards.get(2)) != 1) break;
                        if ((cards.get(4) - cards.get(3)) != 1) break;
                        this.straight = cards.get(0) + cards.get(1) + cards.get(2) + cards.get(3) + cards.get(4);
                        this.isStraight = true;
                        this.value = 5;
                        break;
                    }
                    if (cards.get(0) == 2 && cards.get(1) == 3 && cards.get(2) == 4 && cards.get(3) == 5 && cards.get(4) == 14) {
                        this.isStraight = true;
                        this.value = 5 ;
                        this.straight = 15;
                    }
                    if (cardOne.suit.equals(cardTwo.suit) && cardOne.suit.equals(cardThree.suit) && cardOne.suit.equals(cardFour.suit) && cardOne.suit.equals(cardFive.suit)) {
                        this.isFlush = true;
                        this.value = 6;
                    }
                    if (isStraight || isFlush) {
                        if (isFlush && isStraight) this.value = 9;
                        break;
                    }
                    if ((cards.get(0).equals(cards.get(1))) && !(cards.get(0).equals(cards.get(2)))) {
                        this.hasOnePair = true;
                        this.pair = cards.get(0) + cards.get(1);
                        this.value = 2;
                    }
                    if ((cards.get(1).equals(cards.get(2))) && !(cards.get(1).equals(cards.get(3))) && !(cards.get(1).equals(cards.get(0)))) {
                        this.hasOnePair = true;
                        this.pair = cards.get(1) + cards.get(2);
                        this.value = 2;
                    }
                    if ((cards.get(2).equals(cards.get(3))) && !(cards.get(2).equals(cards.get(4))) && !(cards.get(2).equals(cards.get(1)))) {
                        if (this.hasOnePair) {
                            this.hasTwoPair = true;
                            this.twoPair = this.pair + cards.get(2) + cards.get(3);
                            this.value = 3;
                        }
                        else {
                            this.hasOnePair = true;
                            this.pair = cards.get(2) + cards.get(3);
                            this.value = 2;
                        }
                    }
                    if ((cards.get(3).equals(cards.get(4))) && !(cards.get(3).equals(cards.get(2)))) {
                        if (this.hasOnePair) {
                            this.hasTwoPair = true;
                            this.twoPair = this.pair + cards.get(3) + cards.get(4);
                            this.value = 3;
                        }
                        else {
                            this.hasOnePair = true;
                            this.pair = cards.get(3) + cards.get(4);
                            this.value = 2;
                        }
                    }
                    if (((cards.get(0).equals(cards.get(1))) && (cards.get(0).equals(cards.get(2)))) && !(cards.get(0).equals(cards.get(3)))) {
                        this.hasThreeOfAKind = true;
                        this.threeOfAKind = cards.get(0) + cards.get(1) + cards.get(2);
                        this.value = 4;
                    }
                    if ((((cards.get(1).equals(cards.get(2))) && (cards.get(1).equals(cards.get(3)))) && !(cards.get(1).equals(cards.get(4)))) && !(cards.get(1).equals(cards.get(0)))) {
                        this.hasThreeOfAKind = true;
                        this.threeOfAKind = cards.get(1) + cards.get(2) + cards.get(3);
                        this.value = 4;
                    }
                    if (((cards.get(2).equals(cards.get(3))) && (cards.get(2).equals(cards.get(4)))) && !(cards.get(2).equals(cards.get(1)))) {
                        this.hasThreeOfAKind = true;
                        this.threeOfAKind = cards.get(2) + cards.get(3) + cards.get(4);
                        this.value = 4;
                    }
                    if (hasOnePair && hasThreeOfAKind) {
                        this.value = 7;
                        this.fullHouse = this.pair + this.threeOfAKind;
                    }
                    if (cards.get(0).equals(cards.get(1)) && cards.get(1).equals(cards.get(2)) && cards.get(2).equals(cards.get(3))) {
                        this.value = 8;
                        this.fourOfAKind = cards.get(0) + cards.get(1) + cards.get(2) + cards.get(3);
                    }
                    if (cards.get(1).equals(cards.get(2)) && cards.get(2).equals(cards.get(3)) && cards.get(3).equals(cards.get(4))) {
                        this.value = 8;
                        this.fourOfAKind = cards.get(1) + cards.get(2) + cards.get(3) + cards.get(4);
                    }
                    break;
                }
            }
            private boolean highCardChecker(Hand a){
                if (this.cards.get(4) > a.cards.get(4)) return true;
                if (this.cards.get(4) < a.cards.get(4)) return false;
                if (this.cards.get(3) > a.cards.get(3)) return true;
                if (this.cards.get(3) < a.cards.get(3)) return false;
                if (this.cards.get(2) > a.cards.get(2)) return true;
                if (this.cards.get(2) < a.cards.get(2)) return false;
                if (this.cards.get(1) > a.cards.get(1)) return true;
                if (this.cards.get(1) < a.cards.get(1)) return false;
                if (this.cards.get(0) > a.cards.get(0)) return true;
                if (this.cards.get(0) < a.cards.get(0)) return false;
                return false;
            }

            public boolean pokerWinner (Hand a) {
                if (this.value > a.value) return true;
                else if (this.value == a.value) {
                    switch (this.value) {
                        case 1: return this.highCardChecker(a);
                        case 2:
                            if (this.pair > a.pair) return true;
                            if (this.pair < a.pair) return false;
                            return this.highCardChecker(a);
                        case 3: if (this.twoPair > a.twoPair) return true;
                            if (this.twoPair < a.twoPair) return false;
                            return this.highCardChecker(a);
                        case 4: if (this.threeOfAKind > a.threeOfAKind) return true;
                            if (this.threeOfAKind < a.threeOfAKind) return false;
                            return this.highCardChecker(a);
                        case 5: return (this.straight > a.straight);
                        case 6: return this.highCardChecker(a);
                        case 7: if (this.threeOfAKind > a.threeOfAKind) return true;
                                if (this.threeOfAKind < a.threeOfAKind) return false;
                                return this.highCardChecker(a);
                        case 8: if (this.fourOfAKind > a.fourOfAKind) return true;
                                return this.highCardChecker(a);
                    }
                }
                return false;
            }
        }
        try {
            Scanner ourFile = new Scanner(new URL("https://projecteuler.net/project/resources/p054_poker.txt").openStream());
            while (ourFile.hasNext()) { // 10 cards per game!
                    Hand player1 = new Hand(ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next());
                    Hand player2 = new Hand(ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next());
                    if (player1.pokerWinner(player2)) player1Wins++;
                    else System.out.println("LOSS ");
                    if (player1.hasOnePair) System.out.println("Pair: " + player1.pair + " ");
                    if (player1.hasTwoPair) System.out.println("Two Pair: " + player1.twoPair + " ");
                    if (player1.hasThreeOfAKind) System.out.println("Three of a Kind" + player1.threeOfAKind);
                    if (player1.fourOfAKind != 0) System.out.println("Four of a Kind: " + player1.fourOfAKind);
                    if (player1.isStraight) System.out.println("Straight: " + player1.straight);
                    if (player1.isFlush) System.out.println("Flush");
                    if (player1.fullHouse != 0) System.out.println("Full House: " + player1.fullHouse);
                    if (player1.straightFlush != 0) System.out.println("Straight Flush: " + player1.straight);
                    System.out.println(player1Wins);
            }
        }
        catch (MalformedURLException e) {System.out.println("Fail: " + e);}
        catch (IOException f) {System.out.println("Fail fail fail: " + f);}

    }
}
