package Euler;
import java.io.IOException;
import java.util.*;
import java.net.*;

// Yes I know this file is a mess but it's been fun! (And it's my mess so who cares)

enum Suit {
    CLUBS, DIAMONDS, SPADES, HEARTS
}
enum cardValue {
    TWO (2),
    THREE (3),
    FOUR (4),
    FIVE (5),
    SIX (6),
    SEVEN (7),
    EIGHT (8),
    NINE (9),
    TEN (10),
    JACK (11),
    QUEEN (12),
    KING (13),
    ACE (14);
    private int value;
    cardValue (int a) {
        this.value = a;
    }
    public int getValue() {
        return this.value;
    }
}

public class PokerHands {
    public static void main (String[] args) {
        int player1Wins = 0;
        class Hand {
            class Card {
                Suit suit;
                cardValue cardValue;
                private Card (String a) {
                    switch (a.substring(1)) {
                        case "C": this.suit = Suit.CLUBS; break;
                        case "D": this.suit = Suit.DIAMONDS; break;
                        case "S": this.suit = Suit.SPADES; break;
                        case "H": this.suit = Suit.HEARTS; break;
                    }
                    switch (a.substring(0,1)) {
                        case "2": this.cardValue = Euler.cardValue.TWO; break;
                        case "3": this.cardValue = Euler.cardValue.THREE; break;
                        case "4": this.cardValue = Euler.cardValue.FOUR; break;
                        case "5": this.cardValue = Euler.cardValue.FIVE; break;
                        case "6": this.cardValue = Euler.cardValue.SIX; break;
                        case "7": this.cardValue = Euler.cardValue.SEVEN; break;
                        case "8": this.cardValue = Euler.cardValue.EIGHT; break;
                        case "9": this.cardValue = Euler.cardValue.NINE; break;
                        case "T": this.cardValue = Euler.cardValue.TEN; break;
                        case "J": this.cardValue = Euler.cardValue.JACK; break;
                        case "Q": this.cardValue = Euler.cardValue.QUEEN; break;
                        case "K": this.cardValue = Euler.cardValue.KING; break;
                        case "A": this.cardValue = Euler.cardValue.ACE; break;
                    }
                }
            }
            private Card cardOne;
            private Card cardTwo;
            private Card cardThree;
            private Card cardFour;
            private Card cardFive;
            private int highCard;               // 1
            private int pair;                   // 2
            private boolean hasOnePair;
            private int twoPair;                // 3
            private boolean hasTwoPair;
            private int threeOfAKind;           // 4
            private boolean hasThreeOfAKind;
            private int straight = 0;           // 5
            private boolean isStraight = false;
            private boolean flush;              // 6
            private int fullHouse;              // 7
            private int fourOfAKind;            // 8
            private int straightFlush;          // 9
            private int value = 0;

            public Hand(String a, String b, String c, String d, String e) {
                cardOne = new Card(a);
                cardTwo = new Card(b);
                cardThree = new Card(c);
                cardFour = new Card(d);
                cardFive = new Card(e);
                boolean checking = true;
                ArrayList<Integer> cards = new ArrayList<>();
                cards.add(cardOne.cardValue.getValue());
                cards.add(cardTwo.cardValue.getValue());
                cards.add(cardThree.cardValue.getValue());
                cards.add(cardFour.cardValue.getValue());
                cards.add(cardFive.cardValue.getValue());
                Collections.sort(cards);
                System.out.print(cards);
                System.out.println(cardOne.cardValue.getValue() + " " + cardOne.suit + " | " + cardTwo.cardValue.getValue() + " " + cardTwo.suit + " | " + cardThree.cardValue.getValue() + " " + cardThree.suit + " | " + cardFour.cardValue.getValue() + " " + cardFour.suit + " | " + cardFive.cardValue.getValue() + " " + cardFive.suit);
                while (checking) {

                    if ((cards.get(0).equals(cards.get(1))) && !(cards.get(0).equals(cards.get(2)))) {
                        this.hasOnePair = true;
                        this.value = 2;
                        this.pair = cards.get(0) + cards.get(1);
                        if ((cards.get(2).equals(cards.get(3))) && !(cards.get(2).equals(cards.get(4)))) {
                            this.hasTwoPair = true;
                            this.value = 3;
                            this.twoPair = cards.get(3) + cards.get(4);
                        }
                        // WORKING HERE
                    }
                    if (((Objects.equals(cards.get(0), cards.get(1))) && Objects.equals(cards.get(2), cards.get(3))) || ((Objects.equals(cards.get(0), cards.get(1))) && Objects.equals(cards.get(3), cards.get(4))) || ((Objects.equals(cards.get(1), cards.get(2))) && Objects.equals(cards.get(3), cards.get(4)))) {
                        this.hasTwoPair = true;
                        this.value = 3;
                    }
                        if ((Objects.equals(cards.get(0), cards.get(1)) && Objects.equals(cards.get(0), cards.get(2))) || (Objects.equals(cards.get(2), cards.get(3)) && Objects.equals(cards.get(2), cards.get(4)))) {
                        this.hasThreeOfAKind = true;
                        this.value = 4;
                    }


                    while (checking) {
                        if ((cards.get(1) - cards.get(0)) != 1) break;
                        if ((cards.get(2) - cards.get(1)) != 1) break;
                        if ((cards.get(3) - cards.get(2)) != 1) break;
                        if ((cards.get(4) - cards.get(3)) != 1) break;
                        this.straight = cards.get(0) + cards.get(1) +cards.get(2) +cards.get(3) +cards.get(4);
                        this.isStraight = true;
                        this.value = 5;
                        break;
                    }
                    if (cardOne.suit.equals(cardTwo.suit) && cardOne.suit.equals(cardThree.suit) && cardOne.suit.equals(cardFour.suit) && cardOne.suit.equals(cardFive.suit)) {
                        this.flush = true;
                        this.value = 6;
                    }
                    if (isStraight && flush) {
                        this.value = 9;
                        break;
                    }

                    break;
                }
            }
            public boolean pokerWinner (Hand a) {
                return this.value > a.value;
            }
        }
        try {
            Scanner ourFile = new Scanner(new URL("https://projecteuler.net/project/resources/p054_poker.txt").openStream());
            while (ourFile.hasNext()) { // 10 cards per game!
                    Hand player1 = new Hand(ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next());
                    Hand player2 = new Hand(ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next(), ourFile.next());
                    if (player1.pokerWinner(player2)) player1Wins++;
                    System.out.println(player1Wins);
            }
        }
        catch (MalformedURLException e) {System.out.println("Fail: " + e);}
        catch (IOException f) {System.out.println("Fail fail fail: " + f);}
    }
}
